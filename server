#!/bin/sh

set -ue

# global configuration
source_dir="$HOME/cisecraft"
server_dir=/tmp/cisecraft

init_only=

#-----------------------------------------------------------------------------

err() { printf >&2 'error: %s\n' "$*"; }
warn() { print >&2 'warning: %s\n' "$*"; }
echo() { printf '%s\n' "$*"; }

usage() {
  cat >&2 <<EOF
Usage:
  server [<option>...]

  Launch the Cisecraft Minecraft server.

Options:
  --init    initialize server and exit
  --help    show this help and exit
EOF
}

for opt; do
  case $opt in
    --init) init_only=1 ;;
    --help) usage; exit 0 ;;
    *) err "invalid option: $opt"; exit 2 ;;
  esac
done

#-----------------------------------------------------------------------------

# this is for JNA
export XDG_CACHE_HOME="$XDG_RUNTIME_DIR/cache"

# get current world number
read -r current < "$source_dir/current"
case $current in
  [0-9][0-9]) ;;
  *) err "invalid current world number '$current'"; exit 1 ;;
esac

# read server config
config_file="$source_dir/config/$current"
if [ ! -e "$config_file" ]; then
  err "world $current not configured"
  exit 1
fi
unset minecraft_version fabric_version installer_version \
      java_dist_url java_dir world_name mods
mod_urls=
while read -r key value; do
  case $key in
    minecraft) minecraft_version=$value ;;
    fabric) fabric_version=$value ;;
    installer) installer_version=$value ;;
    java_dist_url) java_dist_url=$value ;;
    java_dir) java_dir=$value ;;
    name) world_name=$value ;;
    mod) mod_urls="$mod_urls $value" ;;
    '') ;;
    *) err "unrecognized config key '$key'"; exit 1 ;;
  esac
done < "$config_file"

# because of set -u, this will also catch unset keys
echo "* Minecraft version: $minecraft_version"
echo "* Fabric version: $fabric_version"
echo "* Installer version: $installer_version"
echo "* Java URL: $java_dist_url"
echo "* Java directory: $java_dir"
echo "* Mods:"
for mod_url in $mod_urls; do
  echo "    $mod_url"
done
echo

server_jar_url="https://meta.fabricmc.net/v2/versions/loader/$minecraft_version/$fabric_version/$installer_version/server/jar"
server_jar="fabric-$minecraft_version-$fabric_version-$installer_version.jar"

# check & enter the server directory
mkdir -p "$server_dir"
if [ ! -O "$server_dir" ]; then
  err "the server directory was stolen by another user!"
  exit 1
fi
cd "$server_dir"

# prepare world directory
world_dir="$source_dir/worlds/$current"
mkdir -p "$world_dir"
ln -sfT "$world_dir" world
ln -sfT world/usercache.json usercache.json
[ -e world/usercache.json ] || : >> world/usercache.json

# generate static files
cp -T "$source_dir/ops.json" ops.json
cp -T "$source_dir/server.properties" server.properties
echo "eula=true" > eula.txt

# download Java if necessary
if [ ! -f "$java_dir/bin/java" ]; then
  rm -rf "$java_dir"
  echo "Downloading Java..."
  curl -LfsS -o java.tar.gz "$java_dist_url"
  echo "Extracting Java..."
  tar -xf java.tar.gz
  rm -f java.tar.gz
fi

# download server jar if necessary
if [ ! -f "$server_jar" ]; then
  echo "Downloading server JAR..."
  curl -LfsS -o "$server_jar" "$server_jar_url"
fi

rm -rf mods
mkdir -p modcache mods

# download missing mods
mods=
for mod_url in $mod_urls; do
  mod=$(printf %s "$mod_url" | tr -c '0-9A-Za-z_.+~%-' '[%*]')
  mods="$mods $mod"
  mod_file="modcache/$mod.jar"
  if [ ! -e "$mod_file" ]; then
    echo "Downloading $mod_url"
    curl -LfsS -o "$mod_file" "$mod_url"
  fi
done

# regenerate mods directory
for mod in $mods; do
  ln -sT "../modcache/$mod.jar" "mods/$mod.jar"
done

if [ "$init_only" ]; then
  exit 0
fi

echo "Starting server..."
exec "$java_dir/bin/java" \
  -Xmx8G \
  -Dlog4j.configurationFile="$source_dir/log4j.xml" \
  -jar "$server_jar" --nogui
